To evolve instance_1 to be compatible with grammar_2, let's first analyze the differences between the two grammars:

1. **Configuration Additions**:
   - Grammar 2 introduces a `Configuration` section at the beginning of `PersistenceModel`, which includes configurations for Java and Python with specific fields. These configurations are mandatory in grammar 2 but were not present in grammar 1.
  
2. **Field Declarations Changes**:
   - In Grammar 2, `FieldDeclaration` encapsulates a `Field` with optional `TypeOptions`, as opposed to Grammar 1, where `TypeOptions` were part of the `PropertyField`, `EntityField`, and `BackrefField`.

3. **EntityField Modifications**:
   - Grammar 2 includes directionality (`bidirectional`, `unidirectional`) for relationships within `EntityField`, but this is an optional feature.

Since no mandatory fields were added to the structure of an entity except the `Configuration` block, we should only focus on adding this to the beginning of our instance_1. The `directionality` is an optional attribute, hence we'll not instantiate it.

Let's modify instance_1 to reflect these changes:

```plaintext
Configuration [
    // Define configurations for Java and Python if necessary; 
    // omitted here as instructed since they're optional.
]

entity Club {
	property name: String [unique, not_null]
	
	object [n..1] sportshall: SportsHall [not_null]
	
	object [1..n] teams: Team
	object [1..n] roles: ClubRole
	object [1..n] sessions: TrainingSession
}

entity Team {
	property numbering: Integer [not_null]
	property name: String [unique]
	
	object [n..1] leader: Player // UseAlter when a cyclic dependency occurs
	
	object [n..m] sessions: TrainingSession
	
	backref [Club.teams] club [not_null]
	backref [Player.team] members
}

entity Player {
	property public_id: String(100) [not_null, unique]
	property first_name: String [not_null]
	property last_name: String [not_null]
	property position: Integer
	
	object [1..n] information: Information
	object [1..n] roles: ClubRole
	
	object [n..1] team: Team
	object [n..1] image: Image [not_null]
}

entity Image {
	property path: String(200) [not_null]
	property title: String [not_null]
}

entity Information {
	property attribute: String [not_null]
	property val: String [not_null]
	
	backref [Player.information] player [not_null]
}

entity SportsHall {
	property street: String [not_null]
	property street_number: Integer [not_null]
	property zip_code: String [not_null]
	property place: String [not_null]
	property country: String [not_null]
	property state: String [not_null]
	
	object [n..m] images: Image
}

entity ClubRole {
	property name: String [not_null]
	
	backref [Club.roles] club [not_null]
	backref [Player.roles] player
}

entity TrainingSession {
	property day: Integer [not_null]
	property hour: Integer [not_null]
	property minute: Integer [not_null]
	
	backref [Club.sessions] club [not_null]
}
```

Note: We've added a placeholder for the `Configuration` section at the beginning, as this is now a required component of a `PersistenceModel`. We do not specify Java or Python configurations or directionality in `EntityField` as per the instructions not to instantiate optional parts.