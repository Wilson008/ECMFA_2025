To create `instance_2` that conforms to `grammar_2`, we need to analyze the differences between `grammar_1` and `grammar_2` and then adjust `instance_1` accordingly.

### Differences between Grammar 1 and Grammar 2:

1. **ChkVariableDeclaration:**
   - Grammar 1: `type=ChkTypeReference (arr+='[' (sz+=CHK_NUMBER)? ']')* name=ValidID ('(' limit1=Limit (';' limit+=Limit)* ')')? ('value' '{' spValue=SpValue '}')?;`
   - Grammar 2: `type=ChkTypeReference ('[' sz+=CHK_NUMBER ']')* name=ValidID ('(' limit1=Limit (';' limit+=Limit)* ')')? ('sp' '{' spValue=SpValue '}')?;`
   - **Change**: Keyword `'value'` is replaced with `'sp'`.

2. **Helper function `select`:**
   - Grammar 1: `select='select' '(' vars+=ValidID (',' vars+=ValidID)* ')'`
   - Grammar 2: `select='select' '(' vars+=ValidID (',' vars+=ValidID)* ':' ((var3=ChkVariables) '..' (var4=ChkVariables)) ')'`
   - **Change**: The `select` statement in Grammar 2 requires an additional `:` followed by a range `var3` to `var4`.

3. **FormatExpression:**
   - Grammar 2 introduces a new parser rule `FormatVariable`, which affects `FormatExpression`. 
   - Grammar 1: `FormatExpression` directly used variables.
   - Grammar 2: `FormatExpression` uses `FormatVariable`.
   - **Change**: Each occurrence of variable in `FormatExpression` must be wrapped in `FormatVariable`, which is defined as `fv=ChkVariable ('<' (count=CHK_NUMBER) '>')?`

### Modifications to Instance 1

Based on the differences identified, we need to adjust `instance_1` accordingly:

- Change every instance of `'value' { ... }` to `'sp' { ... }` in `ChkVariableDeclaration`.
- Modify `select` usage in the `MR` sections to include a range after the colon.
- Adjust `FormatExpression` occurrences to use the `FormatVariable` definition.

Below is `instance_2` with these modifications:

```
// Specification untuk soal knapsack Polo the Penguin and the Test
class Knapsack{
	/*
	 * variable declaration
	 * akan digunakan untuk men-generate atribut private, 
	 * fungsi untuk membaca, menulis, dan validator variable tersebut
	 */
	
	// variable untuk input
	int tc (subtask 1 : 1..100) // tc is number of test cases
	int n (subtask 1 : 1..100) // n is number of questions
	int w (subtask 1 : 1..100) // w is time limit for study
	int[n] c (subtask 1 : 1..100) // c[i] is the number of tests that will contain this question
	int[n] p (subtask 1 : 1..100) // p[i] is the number of points that he will get for correctly answering this question on each of tests
	int[n] t (subtask 1 : 1..100) // t[i] is the amount of time (in minutes) that he needs to spend to learn this question
	
	// variable untuk output
	int point // point is maximal possible total number of points he can get for all tests if he studies for no more than W minutes
	
	// hidden variable (for mr only)
	int[n] y (0..1) // y adalah nomor tempat knapsack item i atau 0 jika tidak dipilih
	
	score {
		(1 : 100)
	}
	
	/*
	 * input format
	 */
	input {
		1 (fv=tc)
		for (k,tc) {
			1 (fv=n,fv=w) // 1 baris pertama berisi 2 buah integer n dan w
			n (fv=c[i],fv=p[i],fv=t[i]) // n baris berikutnya berisi 3 buah integer c,p,t
		}
	}
	
	/*
	 * output format
	 */
	output {
		1 (fv=point) // 1 baris berikutnya berisi 1 buah integer point
	}
	
	hidden {
		1 (fv=y<n>)
	}
	
	MR 1 {
		(select(k,l) : 1..n where 1<=k and k<l and l<=n and c[k]!=c[l] or p[k]!=p[l] or t[k]!=t[l])
		followup {
			(c` = swap(c,k,l))
			(p` = swap(p,k,l))
			(t` = swap(t,k,l))
		}
		check {
			
		}
		
	}
	
	MR 3 {
		(select(k) : 1..n where y[k]==0)
		(def cc = random(0..100))
		followup {
			(t`[k] = t[k]+cc)
		}
		check {
			
		}
	}
	
	MR 4 {
		(select(k) : 1..n where y[k]==0)
		(def cc = random(0..100))
		followup {
			(p`[k] = p[k]-cc)
		}
		check {
			
		}
	}
	
	MR 5 {
		(def c1 = sum(t) where y[i]==1)
		followup {
			(c`[1] = c1)
		}
		check {
			
		}
	}
	
	MR 6 {
		(def cnew = min(c) where y[i] != 0)
		(def pnew = min(p) where y[i] != 0)
		(def tnew = max(t) where y[i] != 0)
		followup {
			(n` = n+1)
			(c` = add(c,cnew))
			(p` = add(p,pnew))
			(t` = add(t,tnew))
		}
		check {
			
		}
	}
	
	MR 7 {
		(select(k) : 1..n where y[k]==0)
		followup {
			(n` = n-1)
			(c` = remove(c,k))
			(p` = remove(p,k))
			(t` = remove(t,k))
		}
		check {
			
		}
	}
	
	MR 8 {
		(select(k) : 1..n where y[k]==1)
		followup {
			(n` = n-1)
			(c`[1] = c[1]-t[k])
			(c` = remove(c,k))
			(p` = remove(p,k))
			(t` = remove(t,k))
		}
		check {
			(point` = point-p[k]*c[k])
		}
	}
	
	MR 9 {
		(select(k,l) : 1..n where 1<=k and k<l and l<=n and y[k]==1 and y[l]==1)
		followup {
			(c`[k] = 1)
			(p`[k] = c[k]*p[k]+c[l]*p[l])
			(t`[k] = t[k]+t[l])
			(n` = n-1)
			(c` = remove(c,l))
			(p` = remove(p,l))
			(t` = remove(t,l))
		}
		check {
			
		}
	}
	
	MR 11 {
		(select(k) : 1..n where y[k]==1)
		(def cc = random(0..100))
		followup {
			(p`[k] = p[k]+cc)
		}
		check {
			(point` = point+cc*c[k])
		}
	}
	
	MR 12 {
		(select(k) : 1..n where y[k]==1)
		(def cc = random(0..100))
		followup {
			(c`[k] = c[k]+cc)
		}
		check {
			(point` = point+cc*p[k])
		}
	}
}
```

These modifications should ensure that `instance_2` matches the updated `grammar_2`.