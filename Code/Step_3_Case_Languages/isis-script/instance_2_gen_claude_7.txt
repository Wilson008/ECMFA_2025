=== Step 3: Instance Transformation ===
I'll analyze the differences between the grammars and modify instance_1 to conform to grammar_2 while following your guidelines. The main changes needed are:

1. Events (`IsisEvent`) are now nested within properties, collections, or actions instead of being standalone
2. Action syntax has changed to use block structure with '{}'
3. Action return type is now specified before the name
4. Repositories have been removed and need to be restructured as services

Here's the modified instance (instance_2):

```
package domainapp.dom.modules.simple

import javax.jdo.annotations.Column
import javax.jdo.annotations.DatastoreIdentity
import javax.jdo.annotations.IdGeneratorStrategy
import javax.jdo.annotations.IdentityType
import javax.jdo.annotations.PersistenceCapable
import javax.jdo.annotations.Queries
import javax.jdo.annotations.Query
import javax.jdo.annotations.Unique
import javax.jdo.annotations.Version
import javax.jdo.annotations.VersionStrategy
import org.apache.isis.applib.annotation.Action
import org.apache.isis.applib.annotation.ActionLayout
import org.apache.isis.applib.annotation.BookmarkPolicy
import org.apache.isis.applib.annotation.DomainObject
import org.apache.isis.applib.annotation.DomainObjectLayout
import org.apache.isis.applib.annotation.DomainServiceLayout
import org.apache.isis.applib.annotation.Editing
import org.apache.isis.applib.annotation.MemberOrder
import org.apache.isis.applib.annotation.Parameter
import org.apache.isis.applib.annotation.ParameterLayout
import org.apache.isis.applib.annotation.Property
import org.apache.isis.applib.annotation.SemanticsOf
import org.apache.isis.applib.annotation.Title
import org.apache.isis.applib.query.QueryDefault
import org.apache.isis.applib.services.i18n.TranslatableString

@PersistenceCapable(identityType=IdentityType.DATASTORE)
@DatastoreIdentity(strategy=IdGeneratorStrategy.IDENTITY, column="id")
@Version(strategy=VersionStrategy.VERSION_NUMBER, column="version")
@Queries(#[
	@Query(name = "find", language = "JDOQL",
		value = "SELECT FROM domainapp.dom.modules.simple.SimpleObject"),
	@Query(name = "findByName", language = "JDOQL",
		value = "SELECT FROM domainapp.dom.modules.simple.SimpleObject WHERE name.indexOf(:name) >= 0")
])
@Unique(name="SimpleObject_name_UNQ", members = #["name"])
@DomainObject(objectType = "SIMPLE")
@DomainObjectLayout(bookmarking = BookmarkPolicy.AS_ROOT)
entity SimpleObject {

	@Column(allowsNull="false", length = 40)
	@Title(sequence="1")
	@Property(editing = Editing.DISABLED)
	property String name {
		event UpdateNameDomainEvent
	}

	@Action(domainEvent = UpdateNameDomainEvent)
	action SimpleObject updateName {
		parameter @Parameter(maxLength = 40) @ParameterLayout(named = "New name") String newName
		body {
			setName(newName)
			this
		}
		validate {
			if (name.contains("!"))
				TranslatableString.tr("Exclamation mark is not allowed")
			else null
		}
	}

	title {
		TranslatableString.tr("Object: {name}", "name", name)
	}

}

@DomainServiceLayout(menuOrder = "10")
service SimpleObjectRepository {

	@Action(semantics = SemanticsOf.SAFE)
	@ActionLayout(bookmarking = BookmarkPolicy.AS_ROOT)
	@MemberOrder(sequence = "1")
	action List<SimpleObject> listAll {
		body {
			container.allInstances(SimpleObject)
		}
	}

	@Action(semantics = SemanticsOf.SAFE)
	@ActionLayout(bookmarking = BookmarkPolicy.AS_ROOT)
	@MemberOrder(sequence = "2")
	action List<SimpleObject> findByName {
		parameter @ParameterLayout(named="Name") String name
		body {
			container.allMatches(new QueryDefault(SimpleObject,
				"findByName", "name", name))
		}
	}

	@MemberOrder(sequence = "3")
	action SimpleObject create {
		parameter @ParameterLayout(named="Name") String name
		body {
			val obj = container.newTransientInstance(SimpleObject)
			obj.name = name
			container.persistIfNotAlready(obj)
			obj
		}
	}
}
```

Key changes made:
1. Moved `UpdateNameDomainEvent` event inside the `name` property block
2. Restructured actions to use block syntax with `body` and other features
3. Converted repository section into a separate service
4. Added return types to actions
5. Restructured action parameters using the new `parameter` syntax
6. Maintained all original formatting, comments, and whitespace

I didn't add any optional new features from grammar_2 (like collections or additional features) as per your guidelines.